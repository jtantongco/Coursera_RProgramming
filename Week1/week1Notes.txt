
create a empty vector
vector()

list vs vector
list can have multiple types within it


each line is an expression

assignment
<- 
x <- 1

print:
print(x)
x

## comments on the  right side

assign the numbers one to 20 to x (as a vector?)
x <- 1:20

assign the integer 4
x <- 4L

assgin the numeric 4
x <- 4

creating a vector:
x <- c(a,b, ..., n) 
note: type of a to n must be equivalent

x <- 9:29 
note: fore integer

types:
numeric (decimal reals)
logical (T/F or True/False)
character
integer 
complex (1+0i)

coercion if you try to combine vectors of different types
(logical seems to be the lowest priority)

changing the type [explicit coercion]:
ex:
as.numeric(x)
as.logical(x)
as.character(x)
as.logical(x)
as.complex(x)

get NA if the coercion doesnt work

m <- matrix (nrow = 2, ncol = 3)

display matrix details
dim(m)
attributes(m)

rows then cols

fill matrix cols first then iterate on rows

change the list of 1 to 10 to a 2 by 5 column wise matrix
m <- 1:10
dim(m) <- c(2,5)

cbind - column bind
takes in a number of vectors (all of same type?)

generates a matrix with the number of columns being the number of vectors
each column is a different vector
the number of rows is the longest cardinality vector
those that are too short are repeated until the end of the pattern

rbind is the same thing but transposed (row bind)

lists:
x <- list(1,"a",TRUE, 1+4i)

1st element: x[1] -> returns a list

y scalar 2
x vector 1:4

x+y -> adds 2 to each element

boolean selection and iteration (conditional assignment)
x[x<=5] <- 0

set all elements in the list x that are less than or equal to 5 to 0

factors
special kind of vector -> categorical data
- ordered
- unordered

x <- factor(c("yes", "yes", "no"))
table(x)
unclass(x)


-----
reordering the levels:

factor(c("yes","no"), levels = c("yes","no"))


NaN: undefined mathematical operation
Na:  undefined anything else

is.na()
is.nan() 

when it is called on a list, returns a list correseponding to the results of the function
being called on every index

------

Data Frame
-> tabular data

Frame vs matrix:
types can be different in frame but not in matrix

attribute
row.names

constructor:
read.table()
read.csv()

frame to matrix: (forced coercion could result in weird data)
data.matrix()

x <- data.frame(foo = 1:4, bar = c(T,T,F,T))
nrow(x)
ncol(x)


Names:
seems to be the names of the columns
lists can also be named
----

x <- 1:3
names(x) <- c("foo","bar","norf")
----

x <- list(a = 1, b=2, c=3)

----

m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m) <- list(c("a",b"), c("c","d"))
##a,b are rows names - c,d are column names


