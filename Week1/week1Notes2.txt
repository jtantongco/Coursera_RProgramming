[] gives back same object as it was called on 
-> can get more than one element

----
x[1] 		- 1st element
x[1:4] 		- elements 1 through 4
x[x > "a"] 	- boolean selector

alternative way of writing the last one
u <- x > "a" 	## create a boolean expression
x[u] 			## apply it as a selector

----
x <- matrix(1:6, 2,3)
x[1,2]
x[2,1]

x[1,] -> return a row
x[,2] -> return a column

note: returns a vector of length 1 when matrix is pulled for element
can turn off and force matrix return by: drop = false

x <- matrix(1:6,2,3)
x[1,2] ## vector
x[1,2,drop = FALSE] ##matrix

x[1,] ## vector
x[1, ,drop = FALSE] ##matrix
----

[[]] extract from list or data frame 
-> not necessarily list or dataframe 
-> single element only 

----

x <- list(foo = 1:4, bar = 0.6, baz = "hello")
list with sequence
x[1]
sequence only
x[[1]]

sequence only
x['foo']
sequence only
x$foo
list with sequence
x[['foo']]

multi-extract
x[c(1,3)]
*no double bracket and $ for multi take
----
name <- "foo" ## computed index
x[[name]] ## index by computed value

x$name looks for literal index 'name'
----

integer sequence
x <- list(a = list(10,12,14), b = c(3.14,2.81))
x[[c(1,3)]] ## get the first element of the list, then get the 3rd element of the result
x[[1][3]] ## same thing
x[[c(2,1)]] ## get the second element of the list, then get the 1st element of the result


partial matching
x <- list(aardvark = 1:5)
x$a ## matches to aardvark
x[["a"]] ## fails as it is exact
x[["a", exact = FASLE]] ## like x$a matching

----
removing NA values

x <- c(1,2,NA,4, NA,5)
bad <- is.na(x)
x[!bad] #gives back the scrubbed dataset
# ! is the negation operator

paired NAs
x <- c(1,2,NA, 4, NA, 5)
y <- c("a","b", NA, "d","f",NA)
good <- complete.cases(x,y) 
##checks all the cases [not NA] in all arguments passed then logical ands all the independent results into one logical operator
x[good]
y[good]
----

Working example:
airquality[1:6, ]
good <- complete.cases(airquality)

airquality[good, ][1:6, ]
##[ ___filter on rows____, ____filter on cols____]


----

typing your dataset to optimize read table

intial <- read.table("datatable.txt", nrows = 100)
classes <- sapply(initial, class)
tabAll <- read.table("datatable.txt", colClasses = classes)

##set nrows maybe helpful -> use unix tool wc to calculate the number of lines

KNOW THY SYSTEM:
How much memory is available
What other applications are in use
Are there other users logged in
What OS
32 or 64 bit

-----


Rule of thumb to calculate the size of memory:
# of rows * # of cols * bytes/data type / (220 bytes/MB) / 1000 (MB / GB) * 2 (overhead for running PC)

bytes / data type = 8 (assuming numeric) 

-----

dput only a single R object

Reading and wrting data to a file
y <-  data.frame(a = 1, b="a")
dput(y)
dput(y,file = "y.R")
new.y <- dget("y.R")
new.y

-----

dump
multiple r objects

x <- "foo"
y <- data.frame(a = 1, b="a")
dump(c("x","y"), file = "data.R")
rm(x,y) #remove from workspace
source("data.R")
y
x


str(file_path, op_code)
op_code:
r) read 
w) write
a) appending
rb, wb ... etc combine flag

----


con <- file("foo.txt","r")
data <- read.csv(con)
close(con)

same as read.csv

---

partial read
con <- gzfile("words.gz")
x <- readLines(con, 10) # read first 10 lines
x 

----

url cnxn
con <- url(" __URL__ ", "r")
x <- readLines(con)
head(x)

----

table puts the count in the 